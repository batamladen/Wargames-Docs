"use strict";(globalThis.webpackChunkwargames_docs=globalThis.webpackChunkwargames_docs||[]).push([[8921],{2942:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Architecture/Backend/Flask Scripts/academy","title":"academy","description":"academy.py","source":"@site/docs/Architecture/Backend/Flask Scripts/academy.md","sourceDirName":"Architecture/Backend/Flask Scripts","slug":"/Architecture/Backend/Flask Scripts/academy","permalink":"/docs/Architecture/Backend/Flask Scripts/academy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Architecture/Backend/Flask Scripts/academy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Frontend","permalink":"/docs/Architecture/Frontend"},"next":{"title":"api","permalink":"/docs/Architecture/Backend/Flask Scripts/api"}}');var t=n(4848),a=n(8453);const o={},d=void 0,i={},u=[{value:"academy.py",id:"academypy",level:2}];function c(e){const r={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"academypy",children:"academy.py"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'# academy.py \u2014 Flask blueprint for the learning academy (paths, modules, lessons, quizzes, and aura points)\r\n\r\nfrom flask import Blueprint, request, jsonify, g\r\nimport sqlite3\r\nimport jwt\r\nfrom auth import DB_PATH, JWT_SECRET, JWT_ALGORITHM  # reuse constants safely\r\n\r\nacademy_bp = Blueprint("academy", __name__, url_prefix="/api/academy")\r\n\r\n\r\n# -------------------------\r\n# Database helper\r\n# -------------------------\r\ndef get_db():\r\n    """Get a SQLite connection stored in Flask\'s g object."""\r\n    if "db" not in g:\r\n        g.db = sqlite3.connect(DB_PATH)\r\n        g.db.row_factory = sqlite3.Row\r\n    return g.db\r\n\r\n\r\n# -------------------------\r\n# Authentication decorator\r\n# -------------------------\r\ndef auth_required(f):\r\n    """Require JWT token in Authorization header to access route."""\r\n    def wrapper(*args, **kwargs):\r\n        auth_header = request.headers.get("Authorization")\r\n        if not auth_header or not auth_header.startswith("Bearer "):\r\n            return jsonify({"success": False, "message": "Missing or invalid token"}), 401\r\n        token = auth_header.split(" ")[1]\r\n        try:\r\n            payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])\r\n            request.username = payload["username"]\r\n        except jwt.ExpiredSignatureError:\r\n            return jsonify({"success": False, "message": "Token expired"}), 401\r\n        except jwt.InvalidTokenError:\r\n            return jsonify({"success": False, "message": "Invalid token"}), 401\r\n        return f(*args, **kwargs)\r\n    wrapper.__name__ = f.__name__\r\n    return wrapper\r\n\r\n\r\n# -------------------------\r\n# List all paths, modules, lessons, and tasks\r\n# -------------------------\r\n@academy_bp.route("/paths", methods=["GET"])\r\n@auth_required\r\ndef get_paths():\r\n    db = get_db()\r\n    paths = db.execute("SELECT * FROM academy_paths").fetchall()\r\n    result = []\r\n\r\n    for path in paths:\r\n        modules = db.execute("SELECT * FROM academy_modules WHERE path_id = ?", (path["id"],)).fetchall()\r\n        module_list = []\r\n        for module in modules:\r\n            lessons = db.execute("SELECT * FROM academy_lessons WHERE module_id = ?", (module["id"],)).fetchall()\r\n            lesson_list = []\r\n            for lesson in lessons:\r\n                tasks = db.execute("SELECT * FROM academy_tasks WHERE lesson_id = ?", (lesson["id"],)).fetchall()\r\n                task_list = [{"id": t["id"], "name": t["name"], "description": t["description"]} for t in tasks]\r\n                lesson_list.append({\r\n                    "id": lesson["id"],\r\n                    "name": lesson["name"],\r\n                    "description": lesson["description"],\r\n                    "tasks": task_list\r\n                })\r\n            module_list.append({\r\n                "id": module["id"],\r\n                "name": module["name"],\r\n                "description": module["description"],\r\n                "lessons": lesson_list\r\n            })\r\n        result.append({\r\n            "id": path["id"],\r\n            "name": path["name"],\r\n            "description": path["description"],\r\n            "modules": module_list\r\n        })\r\n\r\n    return jsonify({"success": True, "paths": result})\r\n\r\n\r\n# -------------------------\r\n# Complete a task\r\n# -------------------------\r\n@academy_bp.route("/complete_task", methods=["POST"])\r\n@auth_required\r\ndef complete_task():\r\n    data = request.json\r\n    task_id = data.get("task_id")\r\n    submitted_answer = data.get("answer")\r\n\r\n    if not task_id:\r\n        return jsonify({"success": False, "message": "task_id is required"}), 400\r\n    if submitted_answer is None:\r\n        return jsonify({"success": False, "message": "answer is required"}), 400\r\n\r\n    db = get_db()\r\n\r\n    # Get user ID\r\n    user_row = db.execute("SELECT id FROM users WHERE username = ?", (request.username,)).fetchone()\r\n    if not user_row:\r\n        return jsonify({"success": False, "message": "User not found"}), 404\r\n    user_id = user_row["id"]\r\n\r\n    # Get task info\r\n    task_row = db.execute("SELECT aura_points, correct_answer FROM academy_tasks WHERE id = ?", (task_id,)).fetchone()\r\n    if not task_row:\r\n        return jsonify({"success": False, "message": "Task not found"}), 404\r\n\r\n    # Check answer correctness\r\n    if str(submitted_answer).strip() != str(task_row["correct_answer"]).strip():\r\n        return jsonify({"success": False, "message": "Incorrect answer"}), 400\r\n\r\n    aura_points = task_row["aura_points"]\r\n\r\n    # Mark task as completed\r\n    db.execute(\r\n        "INSERT OR REPLACE INTO academy_user_progress (user_id, task_id, completed) VALUES (?, ?, 1)",\r\n        (user_id, task_id)\r\n    )\r\n\r\n    # Calculate total aura points from academy and wargames\r\n    academy_total = db.execute(\r\n        "SELECT COALESCE(SUM(t.aura_points),0) as total FROM academy_user_progress p "\r\n        "JOIN academy_tasks t ON p.task_id = t.id WHERE p.user_id=? AND p.completed=1",\r\n        (user_id,)\r\n    ).fetchone()["total"]\r\n\r\n    wargames_total = db.execute(\r\n        "SELECT COALESCE(SUM(aura_points),0) as total FROM progress WHERE username = ? AND game != \'academy\'",\r\n        (request.username,)\r\n    ).fetchone()["total"]\r\n\r\n    total_aura = academy_total + wargames_total\r\n\r\n    # Update global progress table\r\n    db.execute(\r\n        "INSERT INTO progress (username, game, level, aura_points) "\r\n        "VALUES (?, \'academy\', ?, ?) "\r\n        "ON CONFLICT(username, game, level) DO UPDATE SET aura_points = excluded.aura_points",\r\n        (request.username, f"task_{task_id}", aura_points)\r\n    )\r\n\r\n    db.commit()\r\n\r\n    return jsonify({\r\n        "success": True,\r\n        "message": "Task marked completed",\r\n        "aura_points_awarded": aura_points,\r\n        "total_aura_points": total_aura\r\n    })\r\n\r\n\r\n# -------------------------\r\n# Get user progress with completion status\r\n# -------------------------\r\n@academy_bp.route("/progress", methods=["GET"])\r\n@auth_required\r\ndef get_progress():\r\n    db = get_db()\r\n    user_row = db.execute("SELECT id FROM users WHERE username = ?", (request.username,)).fetchone()\r\n    if not user_row:\r\n        return jsonify({"success": False, "message": "User not found"}), 404\r\n    user_id = user_row["id"]\r\n\r\n    paths = db.execute("SELECT * FROM academy_paths").fetchall()\r\n    result = []\r\n\r\n    for path in paths:\r\n        modules = db.execute("SELECT * FROM academy_modules WHERE path_id = ?", (path["id"],)).fetchall()\r\n        module_list = []\r\n        path_completed = True\r\n        for module in modules:\r\n            lessons = db.execute("SELECT * FROM academy_lessons WHERE module_id = ?", (module["id"],)).fetchall()\r\n            lesson_list = []\r\n            module_completed = True\r\n            for lesson in lessons:\r\n                # Determine if all quiz questions are completed\r\n                questions = db.execute("SELECT id FROM academy_questions WHERE lesson_id = ?", (lesson["id"],)).fetchall()\r\n                if not questions:\r\n                    lesson_completed = False\r\n                else:\r\n                    placeholders = ",".join("?" * len(questions))\r\n                    completed_questions = db.execute(\r\n                        f"SELECT COUNT(*) as c FROM academy_quiz_submissions WHERE user_id=? "\r\n                        f"AND question_id IN ({placeholders}) AND is_correct=1",\r\n                        [user_id] + [q["id"] for q in questions]\r\n                    ).fetchone()["c"]\r\n                    lesson_completed = completed_questions == len(questions)\r\n\r\n                if not lesson_completed:\r\n                    module_completed = False\r\n                    path_completed = False\r\n                lesson_list.append({"id": lesson["id"], "name": lesson["name"], "completed": lesson_completed})\r\n            module_list.append({"id": module["id"], "name": module["name"], "completed": module_completed, "lessons": lesson_list})\r\n        result.append({"id": path["id"], "name": path["name"], "completed": path_completed, "modules": module_list})\r\n\r\n    return jsonify({"success": True, "paths": result})\r\n\r\n\r\n# -------------------------\r\n# Get completion percentages\r\n# -------------------------\r\n@academy_bp.route("/progress_percentage", methods=["GET"])\r\n@auth_required\r\ndef progress_percentage():\r\n    db = get_db()\r\n    user_row = db.execute("SELECT id FROM users WHERE username = ?", (request.username,)).fetchone()\r\n    user_id = user_row["id"]\r\n\r\n    total_tasks = db.execute("SELECT COUNT(*) as total FROM academy_questions").fetchone()["total"]\r\n    completed_tasks = db.execute(\r\n        "SELECT COUNT(DISTINCT question_id) as completed FROM academy_quiz_submissions WHERE user_id=? AND is_correct=1",\r\n        (user_id,)\r\n    ).fetchone()["completed"]\r\n\r\n    percentage = int((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0)\r\n    return jsonify({"success": True, "completed_percentage": percentage})\r\n\r\n\r\n# -------------------------\r\n# Get total aura points\r\n# -------------------------\r\n@academy_bp.route("/academy_aura_points", methods=["GET"])\r\n@auth_required\r\ndef get_academy_aura_points():\r\n    db = get_db()\r\n    try:\r\n        user_row = db.execute("SELECT id FROM users WHERE username = ?", (request.username,)).fetchone()\r\n        if not user_row:\r\n            return jsonify({"success": False, "message": "User not found"}), 404\r\n        user_id = user_row["id"]\r\n\r\n        row = db.execute(\r\n            "SELECT COALESCE(SUM(aura_awarded), 0) AS academy_aura "\r\n            "FROM academy_quiz_submissions WHERE user_id = ? AND is_correct = 1",\r\n            (user_id,)\r\n        ).fetchone()\r\n\r\n        academy_aura = row["academy_aura"] if row and "academy_aura" in row.keys() else 0\r\n        return jsonify({"success": True, "academy_aura": academy_aura})\r\n\r\n    except Exception as e:\r\n        return jsonify({"success": False, "message": str(e)}), 500\r\n\r\n\r\n# -------------------------\r\n# Quiz endpoints\r\n# -------------------------\r\n\r\n# Get all quiz questions for a lesson\r\n@academy_bp.route("/lesson/<int:lesson_id>/questions", methods=["GET"])\r\n@auth_required\r\ndef get_lesson_questions(lesson_id):\r\n    db = get_db()\r\n    questions = db.execute("SELECT * FROM academy_questions WHERE lesson_id = ?", (lesson_id,)).fetchall()\r\n    result = []\r\n    for q in questions:\r\n        answers = db.execute\r\n\n'})})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var s=n(6540);const t={},a=s.createContext(t);function o(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);