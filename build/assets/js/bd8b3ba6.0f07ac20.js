"use strict";(globalThis.webpackChunkwargames_docs=globalThis.webpackChunkwargames_docs||[]).push([[5713],{8453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>l});var s=n(6540);const t={},a=s.createContext(t);function o(r){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function l(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:o(r.components),s.createElement(a.Provider,{value:e},r.children)}},8939:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"Architecture/Backend/Flask Scripts/server","title":"server","description":"server.py","source":"@site/docs/Architecture/Backend/Flask Scripts/server.md","sourceDirName":"Architecture/Backend/Flask Scripts","slug":"/Architecture/Backend/Flask Scripts/server","permalink":"/docs/Architecture/Backend/Flask Scripts/server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Architecture/Backend/Flask Scripts/server.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flag","permalink":"/docs/Architecture/Backend/Flask Scripts/flag"},"next":{"title":"nginx","permalink":"/docs/Architecture/Backend/nginx"}}');var t=n(4848),a=n(8453);const o={},l=void 0,c={},p=[{value:"server.py",id:"serverpy",level:2}];function d(r){const e={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"serverpy",children:"server.py"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'from flask import Flask, request, jsonify\r\nfrom flask_cors import CORS\r\nimport subprocess\r\nimport sqlite3\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\n\r\nDB_PATH = "<DB_PATH>"\r\n\r\nusername_map = {\r\n    "shadows": {\r\n        "0": "the-shadows_level0",\r\n        "1": "the-shadows_level1",\r\n        "2": "the-shadows_level2",\r\n        "3": "the-shadows_level3",\r\n        "4": "the-shadows_level4",\r\n        "5": "the-shadows_level5",\r\n        "6": "the-shadows_level6",\r\n        "7": "the-shadows_level7",\r\n        "8": "the-shadows_level8",\r\n        "9": "the-shadows_level9",\r\n    },\r\n    "tunnel": {\r\n        "0": "tunnel_level0",\r\n        "1": "tunnel_level1",\r\n    },\r\n    "jugsaw": {\r\n        "0": "jugsaw_level0",\r\n        "1": "jugsaw_level1",\r\n        "2": "jugsaw_level2",\r\n        "3": "jugsaw_level3",\r\n        "4": "jugsaw_level4",\r\n        "5": "jugsaw_level5",\r\n        "6": "jugsaw_level6",\r\n        "7": "jugsaw_level7",\r\n        "8": "jugsaw_level8",\r\n        "9": "jugsaw_level9",\r\n        "10": "jugsaw_level10",\r\n    }\r\n\r\n}\r\n\r\npassword_map = {\r\n    "shadows": {\r\n        "0": "<password>",\r\n        "1": "<password>",\r\n        "2": "<password>",\r\n        "3": "<password>",\r\n        "4": "<password>",\r\n        "5": "<password>",\r\n        "6": "<password>",\r\n        "7": "<password>",\r\n        "8": "<password>",\r\n        "9": "<password>",\r\n    },\r\n    "tunnel": {\r\n        "0": "<password>",\r\n        "1": "<password>",\r\n    },\r\n    "jugsaw": {\r\n        "0": "<password>",\r\n        "1": "<password>",\r\n        "2": "<password>",\r\n        "3": "<password>",\r\n        "4": "<password>",\r\n        "5": "<password>",\r\n        "6": "<password>",\r\n        "7": "<password>",\r\n        "8": "<password>",\r\n        "9": "<password>",\r\n        "10": "<password>",\r\n    }\r\n\r\n}\r\n\r\n@app.route(\'/api/start\', methods=[\'POST\'])\r\ndef start_container():\r\n    data = request.get_json()\r\n    challenge = data.get(\'challenge\')\r\n    level = str(data.get(\'level\'))\r\n\r\n    # Validate inputs\r\n    if not challenge or not level:\r\n        return jsonify({"error": "Missing challenge or level"}), 400\r\n\r\n    if challenge not in username_map or level not in username_map[challenge]:\r\n        return jsonify({"error": "Unknown challenge or level"}), 400\r\n\r\n    username = username_map[challenge][level]\r\n    password = password_map[challenge][level]\r\n\r\n    # Run spawn_container.py with args challenge and level\r\n    try:\r\n        result = subprocess.run(\r\n            ["/usr/bin/python3", "<PATH_TO_spawn_container.py>", challenge, level],\r\n            capture_output=True,\r\n            text=True,\r\n            check=True\r\n        )\r\n    except subprocess.CalledProcessError as e:\r\n        return jsonify({\r\n            "error": f"Failed to start container: {e}",\r\n            "stdout": e.stdout,\r\n            "stderr": e.stderr\r\n        }), 500\r\n\r\n    # Query latest container port from DB\r\n    try:\r\n        conn = sqlite3.connect(DB_PATH)\r\n        cursor = conn.cursor()\r\n        cursor.execute("""\r\n            SELECT port FROM containers\r\n            WHERE challenge = ? AND level = ?\r\n            ORDER BY created_at DESC\r\n            LIMIT 1\r\n        """, (challenge, level))\r\n        row = cursor.fetchone()\r\n        conn.close()\r\n\r\n        if not row:\r\n            return jsonify({"error": "Port not found in DB"}), 500\r\n\r\n        port = row[0]\r\n\r\n    except Exception as e:\r\n        return jsonify({"error": f"Database error: {e}"}), 500\r\n\r\n    return jsonify({\r\n        "host": "<DOMAIN>",\r\n        "port": port,\r\n        "username": username,\r\n        "password": password\r\n    })\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(host=\'0.0.0.0\', port=5000)\n'})})]})}function u(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}}}]);